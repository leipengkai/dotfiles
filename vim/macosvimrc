"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 定义快捷键的前缀，即<Leader>
let mapleader=";"
" 关闭兼容模式,不与Vi兼容(采用 Vim 自己的操作命令)
set nocompatible 
" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件, 如果编辑的是.py文件,Vim 就是会找Python的缩进规则~/.vim/indent/python.vim
filetype plugin on
" 自适应不同语言的智能缩进
filetype indent on
autocmd BufWritePost $MYVIMRC source $MYVIMRC " 让配置变更立即生效


set encoding=utf-8
" :set ts=4  
set tabstop=4 " tab制表符空格数
set shiftwidth=4  " 自动缩进 设置为4个空格
set expandtab " 将制表符替换为空格
" set softtabstop=4 " 把连续数量的空格视为一个制表符

set hlsearch " 搜索时高亮显示被找到的文本
set incsearch " 开启实时搜索功能,每输入一个字符,就自动跳到第一个匹配的结果

set ignorecase " 搜索时大小写不敏感
set wildmenu " vim 自身命令行模式智能补全

" set ruler " 显示光标当前位置
set number " 显示行号
set relativenumber "显示光标所在的当前行的行号,其他行都为相对于该行的相对行号
set laststatus=2 " 总是显示状态栏
set cursorline " 光标所在的当前行高亮
hi CursorLine   cterm=NONE ctermbg=green ctermfg=brown guibg=NONE guifg=NONE

" hi CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

" hi CursorLine   cterm=NONE ctermbg=darkyellow ctermfg=green guibg=NONE guifg=NONE



"highlight iCursor guifg=white guibg=steelblue
"set guicursor=n-v-c:block-Cursor
"set guicursor+=i:ver100-iCursor
"set guicursor+=n-v-c:blinkon0
"set guicursor+=i:blinkwait10


"hi CursorLine guifg=NONE guibg=#002943
"hi Cursor guifg=#F8F8F8 guibg=#A7A7A7
"hi CursorIM guifg=#F8F8F8 guibg=#002947"#5F5A60
"
" hi CursorLine term=bold cterm=bold guibg=red " guibg=Grey40
" hi Cursor   cterm=NONE ctermbg=red " 光标不由vim控制
" hi Search         guifg=NONE        guibg=#2F2F00     gui=underline ctermfg=NONE        ctermbg=NONE	      cterm=underline
" hi Comment cterm=underline ctermfg=red ctermbg=blue  " 定义蓝底红字并使用下划线来显示注释
" highlight Constant ctermbg=Blue
" vim 支持三种终端:term,黑白终端. cterm,彩色终端:gui,Gvim窗口
" term:可以定义其字体显示为:bold,underline,reverse,italic或standout
" cterm 表示为原生vim设置样式,设置为NONE表示可以自定义设置
" ctermbg,ctermfg 设置终端vim的背景色,前景色
" guibg,guifg 设置gvim的背景色和前景色


set scrolloff=3 " 垂直滚动时,光标距离顶部/底部的位置 3L
" set sidescrolloff=15
"set showmatch matchtime=0  

set backspace=2 " 解决MacOS使用backspace,删除文字时有警告声的问题
" set spell spelllang=en_us " 打开英语单词的拼写检查
set autochdir " 自动切换工作目录





" 主题风格 配色方案
" set background=dark
" colorscheme solarized
" colorscheme molokai
" colorscheme phd
" 美化状态栏
let g:Powerline_colorscheme='solarized256'



" syntax enable " 开启语法高亮功能
syntax on " 打开语法高亮.自动识别代码,使用多种颜色显示
set showcmd " 显示命令模式下输入的字符 yaw

"Rename tabs to show tab# and # of viewports
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= (i== t ? '%#TabNumSel#' : '%#TabNum#')
            let s .= i
            if tabpagewinnr(i,'$') > 1
                let s .= '.'
                let s .= (i== t ? '%#TabWinNumSel#' : '%#TabWinNum#')
                let s .= (tabpagewinnr(i,'$') > 1 ? wn : '')
            end

            let s .= ' %*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= file
            let s .= (i == t ? '%m' : '')
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
endif

set tabpagemax=15
hi TabLineSel term=bold cterm=bold ctermfg=16 ctermbg=229
hi TabWinNumSel term=bold cterm=bold ctermfg=90 ctermbg=229
hi TabNumSel term=bold cterm=bold ctermfg=16 ctermbg=229

hi TabLine term=underline ctermfg=16 ctermbg=145
hi TabWinNum term=bold cterm=bold ctermfg=90 ctermbg=145
hi TabNum term=bold cterm=bold ctermfg=16 ctermbg=145


" load plugins from vundle
"Vundle Section Start
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" call plug#begin('~/.vim/plugged')

Plugin 'VundleVim/Vundle.vim' " 插件管理
Plugin 'scrooloose/nerdtree' " 文件树 NERDTreeToggle F3
Plugin 'Xuyuanp/nerdtree-git-plugin' " nerdtree 也显示git信息
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " 导航树的语法高亮
Plugin 'majutsushi/tagbar' " 导航橍 TagbarToggle F4
Plugin 'jiangmiao/auto-pairs' " 另一半符号的自动补全

Plugin 'tpope/vim-fugitive' " the ultimate git helper e.x :Gstatus
"Plugin 'motemen/git-vim' " git status
Plugin 'airblade/vim-gitgutter' " 显示git的修改状态 

"Plugin 'scrooloose/syntastic' " 语法检查/高亮
Plugin 'kshenoy/vim-signature' " 实现可视化的书签 e.x:mm `m
" 主题风格
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'tomasr/molokai'
"Plugin 'vim-scripts/phd'


Plugin 'mhinz/vim-startify' " vim开始窗口并显示最近打开的文件
Plugin 'easymotion/vim-easymotion'  " 移动命令的升级(w,b,hjkl,ge,e),可跨窗口

" Plugin 'Lokaltog/vim-powerline' " 美化状态栏
Plugin 'vim-airline/vim-airline' " 美化状态栏
Plugin 'vim-airline/vim-airline-themes' " 状态栏样式
Plugin 'ryanoasis/vim-devicons'  " 图标字体

Plugin 'dyng/ctrlsf.vim' " 内容查找工具 apt install ack
Plugin 'terryma/vim-multiple-cursors' " 内容替换
Plugin 'scrooloose/nerdcommenter' " 代码注释
" Plugin 'suan/vim-instant-markdown' " 实现实时预览功能
Plugin 'iamcco/markdown-preview.vim'


Plugin 'mattn/emmet-vim' " 快速生成html
Plugin 'pangloss/vim-javascript'



call vundle#end()
" call plug#end()
filetype plugin indent on
"Vundle Section End

" Plug 'kien/ctrlp.vim' " fuzzy find files
" $ cd ~/.vim
" $ git clone https://github.com/kien/ctrlp.vim.git bundle/ctrlp.vim
set runtimepath^=~/.vim/bundle/ctrlp.vim

" Plug 'Valloric/YouCompleteMe' 手动clone快点
set runtimepath+=~/.vim/bundle/YouCompleteMe




" 不知道什么原因在MacOS,反应好慢,即使设置了100ms,也要5s才显示修改内容提示
let g:gitgutter_updatetime = 10
let g:ruby_path = system('echo $HOME/.rbenv/shims')


" let g:ctrlsf_ackprg = 'awk'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NERDTree ----------------------------- 
" toggle nerdtree display
map <F3> :NERDTreeToggle<CR>
" open nerdtree with the current file selected
nmap ,t :NERDTreeFind<CR>
" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$', '\.swp$']
" modify size
let NERDTreeWinSize=25
" close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen=0
" show hidden files in NERDTree
let NERDTreeShowHidden=1
" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>


" Tagbar ----------------------------- 
" toggle tagbar display
map <F4> :TagbarToggle<CR>
" autofocus on tagbar open
let g:tagbar_autofocus = 1


" AddHeader ------------------------
map <F5> ms:call AddAuthor()<cr>'s

function AddAuthor()
        let n=1
        while n < 5
                let line = getline(n)
                if line =~'^\s*\*\s*\S*Last\s*modified\s*:\s*\S*.*$'
                        call UpdateTitle()
                        return
                endif
                let n = n + 1
        endwhile
        call AddTitle()
endfunction

function UpdateTitle()
        normal m'
        execute '/* Last modified\s*:/s@:.*$@\=strftime(": %Y-%m-%d %H:%M")@'
        normal "
        normal mk
        execute '/* Filename\s*:/s@:.*$@\=": ".expand("%:t")@'
        execute "noh"
        normal 'k
        echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
endfunction

function AddTitle()
        call append(0,"#!/usr/bin/env python")
        call append(1,"# -*- coding:utf-8 -*-")
        call append(2,'"""')
        call append(3,"@Author        : parker")
        call append(4,"@Email         : parker.lei@ecoprint.tech")
        call append(5,"@Last modified : ".strftime("%Y-%m-%d %H:%M"))
        call append(6,"@Filename      : ".expand("%:t"))
        call append(7,"@Description   : ")
        call append(8,'"""')
        echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

" AddHeader ------------------------

" nmap、imap、vmap来定义映射仅在normal、insert、visual模式有效

" vim-signature ---------------------------------
" 自定义 vim-signature 快捷键
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "m.",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "mda",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "ms",
        \ 'ListLocalMarkers'   :  "m?"
        \ }

" ctrlsf.vim -----------------------------------------
" 插件在工程内全局查找光标所在关键字,设置快捷键.快捷键速记法：search in  project
nnoremap <Leader>sp :CtrlSF<CR>

" vim-easymotion ----------------------------------------
" <Leader>f{char} to move to {char}
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)

" s{char}{char} to move to {char}{char}
" nmap s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)



"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction
" 等同于 <C-w>h,j,k,l
map <C-h> :call WinMove('h')<cr>  
map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-l> :call WinMove('l')<cr>


function! Zoom ()
    " check if is the zoomed state (tabnumber > 1 && window == 1)
    if tabpagenr('$') > 1 && tabpagewinnr(tabpagenr(), '$') == 1
        let l:cur_winview = winsaveview()
        let l:cur_bufname = bufname('')
        tabclose

        " restore the view
        if l:cur_bufname == bufname('')
            call winrestview(cur_winview)
        endif
    else
        tab split
    endif
endfunction

nmap <leader>z :call Zoom()<CR>

" insert model move cursor,为了方便就不再映射正常模式下的大写字母的移动了
"inoremap <C-h> <C-o>h
"inoremap <C-j> <C-o>j
"inoremap <C-k> <C-o>k
"inoremap <C-l> <C-o>l
"inoremap <C-f> <C-o>f
"inoremap <C-t> <C-o>t
"inoremap <C-b> <C-o>b
"inoremap <C-w> <C-o>w
"inoremap <C-e> <C-o>e


let g:mkdp_path_to_chrome = "open -a Google\\ Chrome"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe,不使用就注释掉
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 模板补全
" UltiSnips 的 tab 键与 YCM 冲突，重新设定
" let g:UltiSnipsSnippetDirectories=["mysnippets"]
" let g:UltiSnipsExpandTrigger="<leader><tab>"
" let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
" let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"

" >> /Users/leipengkai/Downloads/anaconda3/bin/python3'
" YCM 补全
let g:ycm_python_binary_path='/usr/bin/python'
" let g:ycm_server_python_interpreter='/Users/leipengkai/Downloads/anaconda3/bin/python3'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'"
" 跳转到申明处
"nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>  
" 只能是 #include 或已打开的文件
" 跳转到定义处
"nnoremap <leader>jd :YcmCompleter GoToDefinition<CR> 
"nnoremap f :tab split \| :YcmCompleter GoToDefinition

" Shortcuts for navigating to definitions using YouCompleteMe
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Open definition in new vertical split
map <leader>ds :split<CR>:exec("YcmCompleter GoToDefinitionElseDeclaration")<CR>
map <leader>dvs :vsp <CR>:exec("YcmCompleter GoToDefinitionElseDeclaration")<CR>
" Open definition in new tab
map <leader>dt :tab split<CR>:exec("YcmCompleter GoToDefinitionElseDeclaration")<CR>


" YCM 补全菜单配色
" 菜单
"highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" 选中项
"highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#106900 guibg=#AFD700


" 补全功能在注释中同样有效
let g:ycm_complete_in_comments=1

" 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
let g:ycm_confirm_extra_conf=0

" 开启 YCM 标签补全引擎
" 开启基于tag的补全，可以在这之后添加需要的标签路径  
let g:ycm_collect_identifiers_from_tags_files=1

"注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0
"在字符串输入中也能补全
let g:ycm_complete_in_strings = 1
" 从第二个键入字符就开始罗列匹配项
let g:ycm_min_num_of_chars_for_completion=2

"" 引入 C++ 标准库 tags
"set tags+=/data/misc/software/app/vim/stdcpp.tags
"set tags+=/data/misc/software/app/vim/sys.tags

" YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
inoremap <leader>; <C-x><C-o>

" 补全内容不以分割子窗口形式出现，只显示补全列表
set completeopt-=preview


" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_cache_omnifunc=0

" 语法关键字补全
let g:ycm_seed_identifiers_with_syntax=1

" 设置在下面几种格式的文件上屏蔽ycm
" let g:ycm_filetype_blacklist = {
" 	  \ 'tagbar' : 1,
" 	  \ 'nerdtree' : 1,
" 	  \}

" Enable tabbing through list of results
let g:ycm_semantic_triggers =  {
        \   'javascript': ['.', 're!(?=[a-zA-Z]{3,4})'],
        \ 'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
        \ 'html': ['<', '"', '</', ' '],
        \ }

