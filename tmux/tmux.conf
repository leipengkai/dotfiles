# set -g default-command "reattach-to-user-namespace -l bash"
# tmux display things in 256 colors
set -g default-terminal "screen-256color"

# automatically renumber tmux windows
set -g renumber-windows on 

# unbind default prefix and set it to Ctrl+a
unbind ^b
set -g prefix 'C-a'
bind C-a send-prefix
# unbind C-k
# bind k send-keys -R \; clear-history # c+k和vim的冲突,c+i:清屏.
bind -n C-S-K send-keys -R \; clear-history # c+k和vim的冲突,c+i:清屏.
bind-key k send-keys "clear && tmux clear-history" \; send-keys "Enter"  





# for nested tmux sessions
bind-key a send-prefix

# Activity Monitoring
setw -g monitor-activity off
set -g visual-activity off

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# make delay shorter
set -sg escape-time 0

# make window/pane index start with 1
set -g base-index 1
setw -g pane-base-index 1 
# reload settings # 重新读取加载配置文件
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."
# bind-key -n C-r source-file ~/.tmux.conf  # 不需要前缀


# tmux中的复制
bind Escape copy-mode
set-window-option -g mode-keys vi       # 复制模式（我更习惯称为“选择模式”）中的默认键盘布局模仿vi
# 系统剪贴板
# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-pipe 'xclip -selection clipboard >/dev/null'

# bind C-c run " tmux save-buffer - | xclip -i -sel clipboard"
# bind C-v run " tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# pane之间切换配置成Vim风格
bind -r h select-pane -L       # 切换到左边的 Pane
bind -r j select-pane -D       # 切换到下边的 Pane
bind -r k select-pane -U       # 切换到上边的 Pane
bind -r l select-pane -R       # 切换到右边的 Pane
# -r表示可重复按键，大概500ms之内，重复的h、j、k、l按键都将有效，完美支持了快速切换的Geek需求
# 绑定HJKL键为面板上下左右调整边缘的快捷指令
bind -r K resizep -U 10 
bind -r J resizep -D 10 
bind -r H resizep -L 10 
bind -r L resizep -R 10 

# 当使用vim 默认使用vim的按键方式
# not_tmux='`echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"` || `echo "#{pane_current_command}" | grep -iqE "(^|\/)fzf"`'
#not_tmux='`echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"`'
#not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)$'"
#bind-key -n C-h if-shell "$not_tmux" "send-keys C-h" "select-pane -L"
#bind-key -n C-j if-shell "$not_tmux" "send-keys C-j" "select-pane -D"
#bind-key -n C-k if-shell "$not_tmux" "send-keys C-k" "select-pane -U"
#bind-key -n C-l if-shell "$not_tmux" "send-keys C-l" "select-pane -R"
#bind-key -n C-\ if-shell "$not_tmux" "send-keys C-\\" "select-pane -l"
# 有vim 才走这里

# tmux窗口命名
set-option -g allow-rename off

# 使用Shift+Left和Shift+Right来改变当前的窗口位置 
bind-key -n S-Left swap-window -t -1
bind-key -n S-Right swap-window -t +1


# 面板分割的命令
unbind '"'
bind - splitw -v -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录
unbind %
bind | splitw -h -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录

# 开启鼠标支持
set-option -g mouse on 



# TPM是Tmux插件管理器
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-resurrect'
# tmux-resurrect
set -g @resurrect-save-bash-history 'on'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-vim 'session'
# 恢复程序状态
set -g @resurrect-processes 'ssh mysql redis-server npm docker'
# set -g @resurrect-save 'S'
# set -g @resurrect-restore 'R'


# 将tmux选择的内容拷贝到系统剪切板,多了一些快捷键的复制
set -g @plugin 'tmux-plugins/tmux-yank' #安装tmux-yank
# set -g @shell_mode 'vi' #兼容shell的vi模式
# set -g @yank_selection 'primary'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'


